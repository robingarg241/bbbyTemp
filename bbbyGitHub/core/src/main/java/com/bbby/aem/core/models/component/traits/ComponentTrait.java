package com.bbby.aem.core.models.component.traits;

import com.day.cq.wcm.api.Page;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ValueMap;
import org.osgi.framework.BundleContext;
import org.osgi.framework.FrameworkUtil;
import org.osgi.framework.InvalidSyntaxException;
import org.osgi.framework.ServiceReference;
import org.slf4j.Logger;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;

/**
 * This interface guarantees the minimum set of fields that all Component Models must provide.
 *
 * @author joelepps
 */
public interface ComponentTrait {

    /**
     * @return The {@link Resource} object for the current component instance.
     */
    @Nonnull
    Resource getResource();

    /**
     * @return The {@link ValueMap} object for the current {@link Resource}.
     */
    @Nonnull
    ValueMap getProperties();

    /**
     * @return The {@link ResourceResolver} object.
     */
    @Nonnull
    ResourceResolver getResourceResolver();

    /**
     * @return The logger object for the concrete class.
     */
    @Nonnull
    Logger getLogger();

    /**
     * @return The {@link SlingHttpServletRequest}. May be null.
     */
    @Nullable
    SlingHttpServletRequest getRequest();

    /**
     * @return The current page.
     */
    @Nullable
    Page getCurrentPage();

    /**
     * Perform any post construction initialization.
     * <p>
     * This operation may be called multiple times.
     *
     * @see <a href="https://sling.apache.org/documentation/bundles/models.html#postconstruct-methods">Sling Models Post
     *      Construct</a>
     */
    void postConstruct() throws Exception;

    /**
     * Returned value will be suitable for uses like the HTML id attribute.
     *
     * @return ID of the component.
     */
    default String getComponentId() {
        String path = getResource().getPath();

        // AVOID MAKING ANY CHANGE TO THE BELOW
        // Authors may use the ID generated by this method as part custom HTML/CSS/JS.
        // Changing how this is calculated may break author customizations.
        try {
            MessageDigest m = MessageDigest.getInstance("MD5");
            m.update(path.getBytes("UTF-8"), 0, path.length());
            // HTML id must start with a letter
            return "i" + new BigInteger(1, m.digest()).toString(16);
        } catch (UnsupportedEncodingException | NoSuchAlgorithmException e) {
            getLogger().error("Failed to build ID for " + path);
            return null;
        }
    }

    /**
     * Get services of {@code type}
     *
     * @param type type of service
     * @param <ServiceType> Service type class
     * @return List of matching services or an empty list.
     */
    default <ServiceType> List<ServiceType> getServices(@Nonnull Class<ServiceType> type) {
        BundleContext bundleContext = FrameworkUtil.getBundle(getClass()).getBundleContext();

        List<ServiceType> services = new ArrayList<>();

        try {
            ServiceReference[] refs = bundleContext.getServiceReferences(type.getName(), null);
            if (refs != null) {
                for (ServiceReference ref : refs) {
                    Object serviceRaw = bundleContext.getService(ref);
                    if (serviceRaw != null && type.isInstance(serviceRaw)) {
                        services.add((ServiceType) serviceRaw);
                    } else {
                        getLogger().warn("Could not find {}: found {}", type, serviceRaw);
                    }
                }
            } else {
                getLogger().warn("No service reference found for {}", type);
            }
        } catch (InvalidSyntaxException e) {
            getLogger().error("Failed to get " + type, e);
        }

        return services;
    }

    /**
     * Get service of {@code type}
     *
     * @param type type of service
     * @param <ServiceType> Service type class
     * @return Service or null if not found
     */
    @Nullable
    default <ServiceType> ServiceType getService(@Nonnull Class<ServiceType> type) {
        ServiceType result = null;

        BundleContext bundleContext = FrameworkUtil.getBundle(getClass()).getBundleContext();

        ServiceReference ref = bundleContext.getServiceReference(type.getName());
        if (ref != null) {
            Object serviceRaw = bundleContext.getService(ref);
            if (serviceRaw != null && type.isInstance(serviceRaw)) {
                result = (ServiceType) serviceRaw;
            } else {
                getLogger().warn("Could not find {}: found {}", type, serviceRaw);
            }

        } else {
            getLogger().warn("No service reference found for {}", type);
        }

        return result;
    }
}
